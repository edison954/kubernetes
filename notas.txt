Kubernetes

instalacion kubectl
https://kubernetes.io/es/docs/tasks/tools/install-kubectl/

curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.18.0/bin/windows/amd64/kubectl.exe
kubectl cluster-info

Instalar virutalbox
https://www.virtualbox.org/wiki/Downloads


Instalar MiniKube

https://kubernetes.io/es/docs/tasks/tools/install-minikube/


minikube start              --> por defecto usa driver hyperv

si falla
minikube delete
https://minikube.sigs.k8s.io/docs/drivers/

usando docker como driver
minikube start --driver=docker

You can also use 'minikube kubectl -- get pods' to invoke a matching version

poner docker como el driver por defecto 

minikube config set driver docker


minikube start

con virutalbox
https://minikube.sigs.k8s.io/docs/drivers/virtualbox/
minikube start --driver=virtualbox
minikube config set driver virtualbox

--------------------

ver funcionamiento

minikube dashboard


Parar minikube
minikube stop

desistalar MiniKube
- parar la mquina   minikube stop


Actualizar minikube
minikube update-check




arranca por defecto una maquina con 
2 cpus, 
2 gb de memoria
20 gb de disco duro

se puede cambiar asi:

minikube config set memory 4

minikube start              --> sigue teniendo los 2GB

minikube config view            --> ver configuracion 

minikube delete

minikube start              --> luego de eliminado e iniciado ya debe tomar los cambios de recursos


------
Crear perfil        (ejemplo simulando dos cluster)

minikube profile cliente2

minikube start -p cliente2              --> iniciar perfil

minikube delete -p cliente2             --> eliminar perfil

minikube config                 --> opciones de configuracion


ver en cual perfil se esta 
minikube profile

Namespaces:  cluster virtuales dentro del mismo cluster fisico
forma de separar por ambitos (ejemplo: desarrollo, produccion) o por cliente ( cliente1, cliente2)
no se pueden tener dos objetos con el mismo nombre dentro de un mismo Namespace


ver Namespaces
desde minikube dashboard        -->> opcion Namespaces
o desde linea de comandos:

kubectl get namespaces

como crear un namespace?
kubectl create namespace cursocmd
kubectl get namespaces

otra forma es usando un archivo .yml
kubectl apply -f namespace.yml 

eliminar namespace
kubectl delete namespace cursocmd
con la plantilla
kubectl delete -f namespace.yml             --> con el apply crea los recursos definidos en la plantilla y con el delete los elimina


Pods:
es un contenedor  (podria ser que un pod tuviese mas de un contenedor pero normalmente contiene 1 uniquo contenedor)
tiene su propia direccion ip, espacios de almacenamiento.
ej: (un pod para motor de bd, para servidor de aplicaciones)
es la unidad minima de trabajo (crea la instancia de una imagen es decir un contenedor)

Crear un pod
kubectl apply -f pod.yml

ver pods
kubectl get pods
kubectl describe pod wildfly                --> mas detalles del pod

acceder al pod          (ingresar al contenedor)
kubectl exec -it wildfly -- /bin/bash                   --> ejecutar consola de bash
kubectl exec -it wildfly -- bash

ver los logs de un pod
kubectl logs -f wildfly

cuando crear un pod?
cuando se necesita procesar con escalado.

Deployments                     --> para indicar de entrada cuantas instancias se desean de un determinado pod
kubectl apply -f deployment.yml 
kubectl get deployments

kubectl get pods

kubectl delete -f deployment.yml            --> eliminar el deployment


Servicios:              --> punto de entrada para los pods.  (ya que los pods se destruyen o crean)
se accede al servicio y da lo mismo si tiene de tras 1 o varios pods
necesarios por ejemplo cuando se tienen un contenedor de app y otro de bd y se necesitan ver. 

kubectl apply -f deploymentWildFly.yml
kubectl apply -f deploymentMariadb.yml

kubectl get deployments.apps

kubectl get pods
ver la descripcion de un pod (ver la ip)
kubectl describe pod mariadb-deployment-665ddcd6f-b4zls             --> nombre del pod tomado de get pods 

ingresar al otro pod
kubectl exec -it wildfly-deployment-6c87554f4f-klhfs bash

cat /etc/hosts
ping mariadb   no lo resuelve (no se ven entre pods, si con la ip) para eso crear el servicio:

CreaciÃ³n del servicio:
kubectl apply -f servicioMariadb.yml

kubectl get services

kubectl get pods

kubectl exec -it wildfly-deployment-6c87554f4f-klhfs bash
ping mariadb-service   si lo resuelve

kubectl describe service mariadb-service                    --> describir el servicio


Ingress  (rutas)           --> exponer los servicios del cluser desde afuer (desde internet)

crear servicio
kubectl apply -f servicioWildfly.yml

minikube addons enable ingress                  --> activar funcionalidad de ingress en minikube local

kubectl apply -f ingress.yml

kubectl get ingress
kubectl describe ingress
kubectl get ingress

minikube ip                     --> saber nuestra direccion ip de nuestro minikube



minikube docker-env

eval $(minikube -p minikube docker-env)

docker ps


------------------------
Aplicacion:

docker run -it --rm --name my-maven-project -v "$(pwd)":/usr/src/mymaven -w /usr/src/mymaven maven:3.3-jdk-8 mvn clean install


Desplegar aplicacion

kubectl apply -f namespace.yml                  --> se crea el namespace y luego se lanzan todos los .yml
kubectl apply -f .

kubectl get pods

kubectl get all                 --> muestra todos (pods, services, deployment, replicaset)

kubectl get ingress


kubens              --> para cambiar rapidamente entre el namespaces en el que estamos
https://github.com/ahmetb/kubectx

kubens default

kubectl get pods


minikube ip             (abrir en el navegador)

Probes                  ---> comprobaciones con respecto a la salud de nuestras apps

livenessProbe               --> evalua si un servicio esta levantado
readinessProbe          --> despues de estar levantado revisar si esta en disposicion de aceptar peticion o no


kubectl delete -f .

kubectl apply -f namespace.yml

kubectl apply -f deploymentWildFly.yml

kubectl get events -w

kubectl apply -f deploymentMariadb.yml
kubectl apply -f servicioMariadb.yml

kubectl get pods
kubectl logs -f wildfly-deployment-6c87554f4f-klhfs


kubectl get pods -w

Limites (de memoria o cpu)
request (recursos minimos que necesita el pod para ejecutarse)  (512Mi milicores)  1000Mi = 1 core completo

        resources:
          requests:
            memory: "150Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"

kubectl apply -f .

kubectl get all

kubectl describe pod wildfly-deployment-6c87554f4f-klhfs



